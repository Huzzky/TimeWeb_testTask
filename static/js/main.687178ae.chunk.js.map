{"version":3,"sources":["Components/Atoms/LabelValuesServer.jsx","Components/Molecules/changeValueServer/UserNameInViewSelectedServer.jsx","const.js","store/action/updateValuesOfServer.js","store/localStorage/recordChangeServerToDB.js","Components/Atoms/BtnForCloseFieldsValuesWithoutSave.jsx","Components/Atoms/BtnForSaveChangeValueServer.jsx","store/action/recordUserTextToReducer.js","Components/Atoms/InputForChangeValueServer.jsx","Components/Atoms/SelectOptionTypesServer.jsx","Components/Molecules/changeValueServer/ChangeFieldsValueServer.jsx","Components/Atoms/BtnForChangeValueServer.jsx","Components/Molecules/changeValueServer/ValuesOfServerWhichCanBeChanged.jsx","Components/Molecules/changeValueServer/ViewSelectedServer.jsx","store/action/requestServerList.js","store/localStorage/startLoadingServerList.js","Components/Molecules/serversList/ServerRowForList.jsx","store/action/selectionServerForView.js","Components/Molecules/serversList/ServersListContainer.jsx","Components/Pages/ServersPage.jsx","App.jsx","store/reducers/serverListReducers.js","store/reducers/userActionWithInputsReducer.js","store/configureStore.js","store/index.js","index.js"],"names":["LabelValuesServer","labelText","className","memo","connect","selectedServer","serverListReducers","customer_id","REQUEST_TO_SERVER_FOR_SERVER_LIST","ERROR_TO_SERVER_FOR_SERVER_LIST","SUCCESS_REQUEST_TO_SERVER_FOR_SERVER_LIST","SELECTION_SERVER_FOR_VIEW","OPEN_INPUT_FOR_CHANGE_VALUE_SERVER","CLOSE_INPUT_FOR_CHANGE_VALUE_SERVER","REQUEST_TO_SERVER_FOR_CHANGE_VALUE_SERVER","SUCCESS_TO_SERVER_FOR_CHANGE_VALUE_SERVER","ERROR_TO_SERVER_FOR_CHANGE_VALUE_SERVER","CHANGE_NAME_SERVER","CHANGE_NAME_SERVER_ERROR","CHANGE_TYPE_SERVER","InputWhichCanBeChanged","server_name","server_type","typesOfServer","optionInputWichChange","updateValueOfServer","idServer","idInput","type","option","valueRecord","dispatch","id","value","Promise","resolve","reject","setTimeout","arrayDataWhichChange","JSON","parse","localStorage","getItem","setItem","stringify","then","result","error","recordChangeServerToDB","res","serverList","updateValuesServer","idSelectedInputWhichChangeValue","typeSelectedInputWhichChangeValue","catch","_","isLoading","isLoadingRequestToChangeValueServer","index","disabled","onClick","userActionWithInputsReducer","serverName","serverType","Object","keys","length","recordUserTextToReducer","userNewTypeOrNewNameServerString","typeInput","userFromInputNameForServerName","userFromInputTypeForServerType","string","useState","valueInServerNameForChange","setValueInServerNameForChange","maxLength","onChange","e","currentTarget","optionServerTypeArray","map","ChangeFieldsValueServer","selectedInputWhichChangeValues","fieldDistribution","inputWhichCanChangeValuesServer","entries","pageOpenSelectedServer","isError","requestServerList","data","serverListStart","selectServer","selectedServerId","rowWithServerNameForServersList","useLayoutEffect","ServersPage","App","initialState","isErrorRequestToChangeValueServer","BoolenValueInputChangeNameServer","allReducers","combineReducers","state","store","createStore","applyMiddleware","thunk","logger","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.687178ae.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\r\nimport { memo } from 'react'\r\n\r\nconst LabelValuesServer = ({ labelText, className }) => {\r\n  return <h3 className={className}>{labelText}</h3>\r\n}\r\n\r\nLabelValuesServer.propTypes = {\r\n  labelText: PropTypes.string,\r\n}\r\n\r\nexport default memo(LabelValuesServer)\r\n","import PropTypes from 'prop-types'\r\nimport { memo } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport LabelValues from '../../Atoms/LabelValuesServer'\r\n\r\nconst UserNameInViewSelectedServer = ({ selectedServer }) => {\r\n  return (\r\n    <div className=\"selected-server__user-name\">\r\n      <LabelValues\r\n        className=\"selected-server__user-label\"\r\n        labelText={'User: '}\r\n      />\r\n      <LabelValues\r\n        className=\"selected-server__user-label\"\r\n        labelText={selectedServer[0].customer_id}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nUserNameInViewSelectedServer.propTypes = {\r\n  selectedServer: PropTypes.array,\r\n}\r\n\r\nconst mapStateToProps = ({ serverListReducers }) => ({\r\n  selectedServer: serverListReducers.selectedServer,\r\n})\r\n\r\nexport default memo(\r\n  connect(mapStateToProps, null)(UserNameInViewSelectedServer),\r\n)\r\n","const REQUEST_TO_SERVER_FOR_SERVER_LIST = 'REQUEST_TO_SERVER_FOR_SERVER_LIST'\r\nconst ERROR_TO_SERVER_FOR_SERVER_LIST = 'ERROR_TO_SERVER_FOR_SERVER_LIST'\r\nconst SUCCESS_REQUEST_TO_SERVER_FOR_SERVER_LIST =\r\n  'SUCCESS_TO_SERVER_FOR_SERVER_LIST'\r\n\r\nconst SELECTION_SERVER_FOR_VIEW = 'SELECTION_SERVER_FOR_VIEW'\r\n\r\nconst OPEN_INPUT_FOR_CHANGE_VALUE_SERVER = 'OPEN_INPUT_FOR_CHANGE_VALUE_SERVER'\r\nconst CLOSE_INPUT_FOR_CHANGE_VALUE_SERVER =\r\n  'CLOSE_INPUT_FOR_CHANGE_VALUE_SERVER'\r\n\r\nconst REQUEST_TO_SERVER_FOR_CHANGE_VALUE_SERVER =\r\n  'REQUEST_TO_SERVER_FOR_CHANGE_VALUE_SERVER'\r\nconst SUCCESS_TO_SERVER_FOR_CHANGE_VALUE_SERVER =\r\n  'SUCCESS_TO_SERVER_FOR_CHANGE_VALUE_SERVER'\r\nconst ERROR_TO_SERVER_FOR_CHANGE_VALUE_SERVER =\r\n  'ERROR_TO_SERVER_FOR_CHANGE_VALUE_SERVER'\r\n\r\nconst CHANGE_NAME_SERVER = 'CHANGE_NAME_SERVER'\r\nconst CHANGE_NAME_SERVER_ERROR = 'CHANGE_NAME_SERVER_ERROR'\r\nconst CHANGE_TYPE_SERVER = 'CHANGE_TYPE_SERVER'\r\n\r\nconst InputWhichCanBeChanged = {\r\n  server_name: 'server Name',\r\n  server_type: 'server Type',\r\n}\r\n\r\nconst typesOfServer = ['vds', 'dedicated', 'hosting', 'idle']\r\n\r\nconst optionInputWichChange = ['open', 'close', 'save']\r\n\r\nexport {\r\n  CHANGE_TYPE_SERVER,\r\n  CHANGE_NAME_SERVER,\r\n  CHANGE_NAME_SERVER_ERROR,\r\n  InputWhichCanBeChanged,\r\n  optionInputWichChange,\r\n  typesOfServer,\r\n  SUCCESS_TO_SERVER_FOR_CHANGE_VALUE_SERVER,\r\n  REQUEST_TO_SERVER_FOR_CHANGE_VALUE_SERVER,\r\n  ERROR_TO_SERVER_FOR_CHANGE_VALUE_SERVER,\r\n  CLOSE_INPUT_FOR_CHANGE_VALUE_SERVER,\r\n  REQUEST_TO_SERVER_FOR_SERVER_LIST,\r\n  SUCCESS_REQUEST_TO_SERVER_FOR_SERVER_LIST,\r\n  ERROR_TO_SERVER_FOR_SERVER_LIST,\r\n  SELECTION_SERVER_FOR_VIEW,\r\n  OPEN_INPUT_FOR_CHANGE_VALUE_SERVER,\r\n}\r\n","import {\r\n  CLOSE_INPUT_FOR_CHANGE_VALUE_SERVER,\r\n  ERROR_TO_SERVER_FOR_CHANGE_VALUE_SERVER,\r\n  OPEN_INPUT_FOR_CHANGE_VALUE_SERVER,\r\n  optionInputWichChange,\r\n  REQUEST_TO_SERVER_FOR_CHANGE_VALUE_SERVER,\r\n  SUCCESS_TO_SERVER_FOR_CHANGE_VALUE_SERVER,\r\n} from '../../const'\r\nimport { recordChangeServerToDB } from '../localStorage/recordChangeServerToDB'\r\n\r\n// @ idServer - нужен для записи значения сервера через его id\r\n// @ idInput - для обозначения id выбранного поля изменения значений сервера\r\n// @ type - тип поля изменения значения сервера (имя сервера или тип сервера)\r\n// @ option - вариант исхода поля (открыть, закрыть без сохранения, сохранить и закрыть)\r\n// @ valueRecord - значение для записи в базу данных\r\nexport const updateValueOfServer = (\r\n  idServer,\r\n  idInput,\r\n  type,\r\n  option,\r\n  valueRecord,\r\n) => {\r\n  return (dispatch) => {\r\n    if (option === optionInputWichChange[2]) {\r\n      dispatch({\r\n        type: REQUEST_TO_SERVER_FOR_CHANGE_VALUE_SERVER,\r\n      })\r\n      recordChangeServerToDB(idServer, type, valueRecord)\r\n        .then((res) => {\r\n          dispatch({\r\n            type: SUCCESS_TO_SERVER_FOR_CHANGE_VALUE_SERVER,\r\n            serverList: res,\r\n            updateValuesServer: res[idServer],\r\n            idSelectedInputWhichChangeValue: idServer,\r\n          })\r\n          dispatch({\r\n            type: CLOSE_INPUT_FOR_CHANGE_VALUE_SERVER,\r\n            idSelectedInputWhichChangeValue: idInput,\r\n            typeSelectedInputWhichChangeValue: type,\r\n          })\r\n        })\r\n        .catch((_) => {\r\n          dispatch({\r\n            type: ERROR_TO_SERVER_FOR_CHANGE_VALUE_SERVER,\r\n          })\r\n        })\r\n    } else if (option === optionInputWichChange[1]) {\r\n      dispatch({\r\n        type: CLOSE_INPUT_FOR_CHANGE_VALUE_SERVER,\r\n        idSelectedInputWhichChangeValue: idInput,\r\n        typeSelectedInputWhichChangeValue: type,\r\n      })\r\n    } else if (option === optionInputWichChange[0]) {\r\n      dispatch({\r\n        type: OPEN_INPUT_FOR_CHANGE_VALUE_SERVER,\r\n        idSelectedInputWhichChangeValue: idInput,\r\n        typeSelectedInputWhichChangeValue: type,\r\n      })\r\n    }\r\n  }\r\n}\r\n","const recordChangeServerToDB = (id, type, value) => {\r\n  let promise = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      let data = () => {\r\n        // а-ля запрос к серверу и запись\r\n        return JSON.parse(localStorage.getItem('data'))\r\n      }\r\n      let arrayDataWhichChange = [...data()]\r\n      arrayDataWhichChange[id][type] = value\r\n      try {\r\n        localStorage.setItem('data', JSON.stringify(arrayDataWhichChange))\r\n        resolve(arrayDataWhichChange)\r\n      } catch {\r\n        reject('Error with record')\r\n      }\r\n    }, 1500)\r\n  })\r\n\r\n  return promise.then(\r\n    (result) => {\r\n      return result\r\n    },\r\n    (error) => {\r\n      throw error\r\n    },\r\n  )\r\n}\r\n\r\nexport { recordChangeServerToDB }\r\n","import PropTypes from 'prop-types'\r\nimport { memo } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { optionInputWichChange } from '../../const'\r\nimport { updateValueOfServer } from '../../store/action/updateValuesOfServer'\r\n\r\nconst BtnForCloseFieldsValuesWithoutSave = ({\r\n  index,\r\n  value,\r\n  updateValueOfServer,\r\n  isLoading,\r\n  className,\r\n}) => {\r\n  return (\r\n    <button\r\n      className={className}\r\n      disabled={isLoading ? 'disabled' : ''}\r\n      onClick={() => {\r\n        updateValueOfServer(null, index, value[0], optionInputWichChange[1])\r\n      }}\r\n    >\r\n      X\r\n    </button>\r\n  )\r\n}\r\n\r\nBtnForCloseFieldsValuesWithoutSave.propTypes = {\r\n  updateValueOfServer: PropTypes.func,\r\n}\r\n\r\nconst mapStateToProps = ({ serverListReducers }) => ({\r\n  isLoading: serverListReducers.isLoadingRequestToChangeValueServer,\r\n})\r\n\r\nconst mapToDispatch = (dispatch) => ({\r\n  updateValueOfServer: (id, index, type, option) =>\r\n    dispatch(updateValueOfServer(id, index, type, option)),\r\n})\r\n\r\nexport default memo(\r\n  connect(mapStateToProps, mapToDispatch)(BtnForCloseFieldsValuesWithoutSave),\r\n)\r\n","import PropTypes from 'prop-types'\r\nimport { memo } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { InputWhichCanBeChanged, optionInputWichChange } from '../../const'\r\nimport { updateValueOfServer } from '../../store/action/updateValuesOfServer'\r\n\r\nconst BtnForSaveChangeValueServer = ({\r\n  isLoading,\r\n  value,\r\n  index,\r\n  selectedServer,\r\n  updateValueOfServer,\r\n  serverName,\r\n  serverType,\r\n  error,\r\n  className,\r\n}) => {\r\n  return (\r\n    <button\r\n      className={className}\r\n      disabled={\r\n        isLoading\r\n          ? 'disabled'\r\n          : !serverName && value[0] === Object.keys(InputWhichCanBeChanged)[0]\r\n          ? 'disabled'\r\n          : serverName.length > 16\r\n          ? 'disabled'\r\n          : error && value[0] === Object.keys(InputWhichCanBeChanged)[0]\r\n          ? 'disabled'\r\n          : ''\r\n      }\r\n      onClick={() => {\r\n        if (error && value[0] === Object.keys(InputWhichCanBeChanged)[0]) {\r\n          return -1\r\n        } else {\r\n          updateValueOfServer(\r\n            selectedServer[1],\r\n            index,\r\n            value[0],\r\n            optionInputWichChange[2],\r\n            value[0] === Object.keys(InputWhichCanBeChanged)[0]\r\n              ? serverName\r\n              : serverType,\r\n          )\r\n        }\r\n      }}\r\n    >\r\n      ok\r\n    </button>\r\n  )\r\n}\r\n\r\nBtnForSaveChangeValueServer.propTypes = {\r\n  index: PropTypes.number,\r\n  isLoading: PropTypes.bool,\r\n  selectedServer: PropTypes.array,\r\n  serverName: PropTypes.string,\r\n  serverType: PropTypes.string,\r\n  updateValueOfServer: PropTypes.func,\r\n  value: PropTypes.array,\r\n  error: PropTypes.bool,\r\n}\r\n\r\nconst mapToDispatch = (dispatch) => ({\r\n  updateValueOfServer: (id, index, type, option, valueRecord) =>\r\n    dispatch(updateValueOfServer(id, index, type, option, valueRecord)),\r\n})\r\n\r\nconst mapStateToProps = ({\r\n  serverListReducers,\r\n  userActionWithInputsReducer,\r\n}) => ({\r\n  selectedServer: serverListReducers.selectedServer,\r\n  isLoading: serverListReducers.isLoadingRequestToChangeValueServer,\r\n  serverName: userActionWithInputsReducer.server_name,\r\n  serverType: userActionWithInputsReducer.server_type,\r\n  error: userActionWithInputsReducer.error,\r\n})\r\n\r\nexport default memo(\r\n  connect(mapStateToProps, mapToDispatch)(BtnForSaveChangeValueServer),\r\n)\r\n","import {\r\n  CHANGE_NAME_SERVER,\r\n  CHANGE_NAME_SERVER_ERROR,\r\n  CHANGE_TYPE_SERVER,\r\n  InputWhichCanBeChanged,\r\n} from '../../const'\r\n\r\nexport const recordUserTextToReducer = (\r\n  userNewTypeOrNewNameServerString,\r\n  typeInput,\r\n) => {\r\n  return (dispatch) => {\r\n    if (typeInput === Object.keys(InputWhichCanBeChanged)[0]) {\r\n      if (\r\n        !userNewTypeOrNewNameServerString ||\r\n        userNewTypeOrNewNameServerString.length > 16\r\n      ) {\r\n        dispatch({\r\n          type: CHANGE_NAME_SERVER_ERROR,\r\n        })\r\n      } else {\r\n        dispatch({\r\n          type: CHANGE_NAME_SERVER,\r\n          userFromInputNameForServerName: userNewTypeOrNewNameServerString,\r\n        })\r\n      }\r\n    } else if (typeInput === Object.keys(InputWhichCanBeChanged)[1]) {\r\n      dispatch({\r\n        type: CHANGE_TYPE_SERVER,\r\n        userFromInputTypeForServerType: !userNewTypeOrNewNameServerString\r\n          ? 'vds'\r\n          : userNewTypeOrNewNameServerString,\r\n      })\r\n    }\r\n  }\r\n}\r\n","import PropTypes from 'prop-types'\r\nimport { memo } from 'react'\r\nimport { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { InputWhichCanBeChanged } from '../../const'\r\nimport { recordUserTextToReducer } from '../../store/action/recordUserTextToReducer'\r\n\r\nconst InputForChangeValueServer = ({\r\n  selectedServer,\r\n  isLoading,\r\n  recordUserTextToReducer,\r\n  error,\r\n}) => {\r\n  const [valueInServerNameForChange, setValueInServerNameForChange] = useState(\r\n    selectedServer[0].server_name,\r\n  )\r\n  return (\r\n    <input\r\n      className={\r\n        'change-container__change-input-input' + (error ? '--error' : '')\r\n      }\r\n      maxLength=\"16\"\r\n      disabled={isLoading ? 'disabled' : ''}\r\n      value={valueInServerNameForChange}\r\n      onChange={(e) => {\r\n        setValueInServerNameForChange(e.currentTarget.value)\r\n        recordUserTextToReducer(\r\n          e.currentTarget.value,\r\n          Object.keys(InputWhichCanBeChanged)[0],\r\n        )\r\n      }}\r\n    ></input>\r\n  )\r\n}\r\n\r\nInputForChangeValueServer.propTypes = {\r\n  isLoading: PropTypes.bool,\r\n  selectedServer: PropTypes.array,\r\n}\r\n\r\nconst mapToDispatch = (dispatch) => ({\r\n  recordUserTextToReducer: (string, type) =>\r\n    dispatch(recordUserTextToReducer(string, type)),\r\n})\r\n\r\nconst mapStateToProps = ({\r\n  serverListReducers,\r\n  userActionWithInputsReducer,\r\n}) => ({\r\n  selectedServer: serverListReducers.selectedServer,\r\n  isLoading: serverListReducers.isLoadingRequestToChangeValueServer,\r\n  error: userActionWithInputsReducer.error,\r\n})\r\n\r\nexport default memo(\r\n  connect(mapStateToProps, mapToDispatch)(InputForChangeValueServer),\r\n)\r\n","import { memo } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { InputWhichCanBeChanged, typesOfServer } from '../../const'\r\nimport { recordUserTextToReducer } from '../../store/action/recordUserTextToReducer'\r\n\r\nconst SelectOptionTypesServer = ({ isLoading, recordUserTextToReducer }) => {\r\n  let optionServerTypeArray = typesOfServer.map((value, index) => {\r\n    return (\r\n      <option\r\n        className=\"change-container__change-input--option\"\r\n        key={index}\r\n        value={value}\r\n      >\r\n        {value}\r\n      </option>\r\n    )\r\n  })\r\n  return (\r\n    <select\r\n      className={'change-container__change-input-select'}\r\n      onChange={(e) => {\r\n        recordUserTextToReducer(\r\n          !e.currentTarget.value ? typesOfServer[1] : e.currentTarget.value,\r\n          Object.keys(InputWhichCanBeChanged)[1],\r\n        )\r\n      }}\r\n      disabled={isLoading ? 'disabled' : ''}\r\n    >\r\n      {optionServerTypeArray}\r\n    </select>\r\n  )\r\n}\r\n\r\nconst mapToDispatch = (dispatch) => ({\r\n  recordUserTextToReducer: (string, type) =>\r\n    dispatch(recordUserTextToReducer(string, type)),\r\n})\r\n\r\nconst mapStateToProps = ({ serverListReducers }) => ({\r\n  isLoading: serverListReducers.isLoadingRequestToChangeValueServer,\r\n})\r\n\r\nexport default memo(\r\n  connect(mapStateToProps, mapToDispatch)(SelectOptionTypesServer),\r\n)\r\n","import PropTypes from 'prop-types'\r\nimport { memo } from 'react'\r\nimport { InputWhichCanBeChanged } from '../../../const'\r\nimport BtnForCloseFieldsValuesWithoutSave from '../../Atoms/BtnForCloseFieldsValuesWithoutSave'\r\nimport BtnForSaveChangeValueServer from '../../Atoms/BtnForSaveChangeValueServer'\r\nimport InputForChangeValueServer from '../../Atoms/InputForChangeValueServer'\r\nimport SelectOptionTypesServer from '../../Atoms/SelectOptionTypesServer'\r\n\r\nconst ChangeFieldsValueServer = ({ value, index }) => {\r\n  return (\r\n    <>\r\n      {value[0] === Object.keys(InputWhichCanBeChanged)[1] ? (\r\n        <div className=\"selected-server__change-container change-container\">\r\n          <SelectOptionTypesServer />\r\n          <BtnForSaveChangeValueServer\r\n            className=\"change-container__btn-close--save\"\r\n            value={value}\r\n            index={index}\r\n          />\r\n          <BtnForCloseFieldsValuesWithoutSave\r\n            className=\"change-container__btn-close--without-save\"\r\n            value={value}\r\n            index={index}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div className=\"selected-server__change-container change-container\">\r\n          <InputForChangeValueServer value={value[0]} />\r\n          <BtnForSaveChangeValueServer\r\n            className=\"change-container__btn-close--save\"\r\n            value={value}\r\n            index={index}\r\n          />\r\n          <BtnForCloseFieldsValuesWithoutSave\r\n            className=\"change-container__btn-close--without-save\"\r\n            value={value}\r\n            index={index}\r\n          />\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nChangeFieldsValueServer.propTypes = {\r\n  index: PropTypes.number,\r\n  value: PropTypes.array,\r\n}\r\n\r\nexport default memo(ChangeFieldsValueServer)\r\n","import PropTypes from 'prop-types'\r\nimport { memo } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { optionInputWichChange } from '../../const'\r\nimport { updateValueOfServer } from '../../store/action/updateValuesOfServer'\r\n\r\nconst BtnForChangeValueServer = ({\r\n  index,\r\n  value,\r\n  updateValueOfServer,\r\n  className,\r\n}) => {\r\n  return (\r\n    <button\r\n      className={className}\r\n      onClick={() => {\r\n        updateValueOfServer(null, index, value[0], optionInputWichChange[0])\r\n      }}\r\n    >\r\n      Изменить\r\n    </button>\r\n  )\r\n}\r\n\r\nBtnForChangeValueServer.propTypes = {\r\n  index: PropTypes.number,\r\n  updateValueOfServer: PropTypes.func,\r\n  value: PropTypes.array,\r\n}\r\n\r\nconst mapToDispatch = (dispatch) => ({\r\n  updateValueOfServer: (id, index, type, option) =>\r\n    dispatch(updateValueOfServer(id, index, type, option)),\r\n})\r\n\r\nexport default memo(connect(null, mapToDispatch)(BtnForChangeValueServer))\r\n","import PropTypes from 'prop-types'\r\nimport { memo } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { InputWhichCanBeChanged } from '../../../const'\r\nimport ChangeFieldsValueServer from './ChangeFieldsValueServer'\r\nimport LabelValuesServer from '../../Atoms/LabelValuesServer'\r\nimport BtnForChangeValueServer from '../../Atoms/BtnForChangeValueServer'\r\n\r\nconst ValuesOfServerWhichCanBeChanged = ({\r\n  selectedServer,\r\n  selectedInputWhichChangeValues,\r\n}) => {\r\n  let fieldDistribution = (value, index) => {\r\n    return selectedInputWhichChangeValues[0] === value[0] ||\r\n      selectedInputWhichChangeValues[1] === value[0] ? (\r\n      <ChangeFieldsValueServer value={value} index={index} />\r\n    ) : (\r\n      <div className=\"value-server__btn-change\">\r\n        <LabelValuesServer\r\n          className=\"value-server__value-which-change\"\r\n          labelText={selectedServer[0][value[0]]}\r\n        />\r\n        <BtnForChangeValueServer\r\n          className=\"value-server__btn-for-change\"\r\n          value={value}\r\n          index={index}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  let inputWhichCanChangeValuesServer = Object.entries(\r\n    InputWhichCanBeChanged,\r\n  ).map((value, index) => {\r\n    return (\r\n      <div className=\"selected-server__value-server value-server\" key={index}>\r\n        <LabelValuesServer\r\n          className=\"value-server__value-denotes\"\r\n          labelText={value[1] + ':'}\r\n        />\r\n        {fieldDistribution(value, index)}\r\n      </div>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <div className=\"selected-server__inputs-for-change\">\r\n      {inputWhichCanChangeValuesServer}\r\n    </div>\r\n  )\r\n}\r\n\r\nValuesOfServerWhichCanBeChanged.propTypes = {\r\n  selectedInputWhichChangeValues: PropTypes.array,\r\n  selectedServer: PropTypes.array,\r\n}\r\n\r\nconst mapStateToProps = ({ serverListReducers }) => ({\r\n  selectedServer: serverListReducers.selectedServer,\r\n  selectedInputWhichChangeValues:\r\n    serverListReducers.selectedInputWhichChangeValues,\r\n})\r\n\r\nexport default memo(connect(mapStateToProps)(ValuesOfServerWhichCanBeChanged))\r\n","import { memo } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport UserNameInViewSelectedServer from './UserNameInViewSelectedServer'\r\nimport ValuesOfServerWhichCanBeChanged from './ValuesOfServerWhichCanBeChanged'\r\nimport LabelValues from '../../Atoms/LabelValuesServer'\r\nimport '../../../Assets/_selectedServer.scss'\r\n\r\nconst ViewSelectedServer = ({ pageOpenSelectedServer, isError, isLoading }) => {\r\n  return !pageOpenSelectedServer ? (\r\n    isLoading ? (\r\n      <></>\r\n    ) : isError ? (\r\n      <></>\r\n    ) : (\r\n      <div className=\"servers-page__select-server\">\r\n        <LabelValues\r\n          className=\"servers-page__text-to-choice-server\"\r\n          labelText={'Выберите сервер'}\r\n        />\r\n      </div>\r\n    )\r\n  ) : (\r\n    <div className=\"selected-server\">\r\n      <UserNameInViewSelectedServer />\r\n      <ValuesOfServerWhichCanBeChanged />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = ({ serverListReducers }) => ({\r\n  pageOpenSelectedServer: serverListReducers.pageOpenSelectedServer,\r\n  isLoading: serverListReducers.isLoading,\r\n  isError: serverListReducers.isError,\r\n})\r\n\r\nexport default memo(connect(mapStateToProps, null)(ViewSelectedServer))\r\n","import {\r\n  ERROR_TO_SERVER_FOR_SERVER_LIST,\r\n  REQUEST_TO_SERVER_FOR_SERVER_LIST,\r\n  SUCCESS_REQUEST_TO_SERVER_FOR_SERVER_LIST,\r\n} from '../../const'\r\nimport { serverListStart } from '../localStorage/startLoadingServerList'\r\n\r\nexport const requestServerList = () => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: REQUEST_TO_SERVER_FOR_SERVER_LIST,\r\n    })\r\n    setTimeout(() => {\r\n      try {\r\n        let _ = serverListStart()\r\n\r\n        dispatch({\r\n          type: SUCCESS_REQUEST_TO_SERVER_FOR_SERVER_LIST,\r\n          serverList: _,\r\n        })\r\n      } catch (_) {\r\n        dispatch({\r\n          type: ERROR_TO_SERVER_FOR_SERVER_LIST,\r\n        })\r\n      }\r\n    }, 1500)\r\n  }\r\n}\r\n","export const serverListStart = () => {\r\n  let data\r\n  try {\r\n    data = JSON.parse(localStorage.getItem('data'))\r\n    if (!data) {\r\n      data = [\r\n        {\r\n          customer_id: 'user1',\r\n          server_name: 'server7',\r\n          server_type: 'vds',\r\n        },\r\n        {\r\n          customer_id: 'user5',\r\n          server_name: 'server2',\r\n          server_type: 'dedicated',\r\n        },\r\n        {\r\n          customer_id: 'user3',\r\n          server_name: 'server4',\r\n          server_type: 'hosting',\r\n        },\r\n      ]\r\n      localStorage.setItem('data', JSON.stringify(data))\r\n    }\r\n  } catch {\r\n    data = [\r\n      {\r\n        customer_id: 'user1',\r\n        server_name: 'server7',\r\n        server_type: 'vds',\r\n      },\r\n      {\r\n        customer_id: 'user5',\r\n        server_name: 'server2',\r\n        server_type: 'dedicated',\r\n      },\r\n      {\r\n        customer_id: 'user3',\r\n        server_name: 'server4',\r\n        server_type: 'hosting',\r\n      },\r\n    ]\r\n    localStorage.setItem('data', JSON.stringify(data))\r\n  }\r\n  return data\r\n}\r\n","import PropTypes from 'prop-types'\r\nimport { memo } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { selectionServerForView } from '../../../store/action/selectionServerForView'\r\nimport LabelValuesServer from '../../Atoms/LabelValuesServer'\r\nimport '../../../Assets/_serverList.scss'\r\n\r\nconst ServerRowForList = ({ serverList, selectServer, selectedServer }) => {\r\n  let internalFuncSelectServer = (id) => {\r\n    selectServer(id)\r\n  }\r\n  let rowWithServerNameForServersList = serverList.map((value, index) => {\r\n    return (\r\n      <div\r\n        className={\r\n          'servers-list__servers-container' +\r\n          (!selectedServer\r\n            ? ''\r\n            : value === selectedServer[0]\r\n            ? '--selected'\r\n            : '')\r\n        }\r\n        key={index}\r\n        onClick={() => internalFuncSelectServer(index)}\r\n      >\r\n        <LabelValuesServer\r\n          className=\"servers-list__name-server\"\r\n          labelText={value.server_name}\r\n        />\r\n      </div>\r\n    )\r\n  })\r\n\r\n  return <div className=\"servers-list\">{rowWithServerNameForServersList}</div>\r\n}\r\n\r\nServerRowForList.propTypes = {\r\n  serverList: PropTypes.array,\r\n}\r\n\r\nconst mapStateToProps = ({ serverListReducers }) => ({\r\n  serverList: serverListReducers.serverList,\r\n  selectedServer: serverListReducers.selectedServer,\r\n})\r\n\r\nconst mapToDispatch = (dispatch) => ({\r\n  selectServer: (selectedServer) =>\r\n    dispatch(selectionServerForView(selectedServer)),\r\n})\r\n\r\nexport default memo(connect(mapStateToProps, mapToDispatch)(ServerRowForList))\r\n","import { SELECTION_SERVER_FOR_VIEW } from '../../const'\r\n\r\nexport const selectionServerForView = (selectedServerId) => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: SELECTION_SERVER_FOR_VIEW,\r\n      selectedServerId: selectedServerId,\r\n    })\r\n  }\r\n}\r\n","import PropTypes from 'prop-types'\r\nimport { memo, useLayoutEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { requestServerList } from '../../../store/action/requestServerList'\r\nimport LabelValuesServer from '../../Atoms/LabelValuesServer'\r\nimport ServerRowForList from './ServerRowForList'\r\n\r\nconst ServersListContainer = ({ requestServerList, isError, isLoading }) => {\r\n  useLayoutEffect(() => {\r\n    requestServerList()\r\n  }, [requestServerList])\r\n\r\n  return isLoading ? (\r\n    <div className=\"servers-page__loading-block\">\r\n      <LabelValuesServer\r\n        className=\"servers-page__text\"\r\n        labelText={'Загрузка'}\r\n      />\r\n    </div>\r\n  ) : isError ? (\r\n    <div className=\"servers-page__error\">\r\n      <LabelValuesServer className=\"servers-page__text\" labelText={'Ошибка'} />\r\n    </div>\r\n  ) : (\r\n    <ServerRowForList />\r\n  )\r\n}\r\n\r\nServersListContainer.propTypes = {\r\n  isError: PropTypes.bool,\r\n  isLoading: PropTypes.bool,\r\n  requestServerList: PropTypes.func,\r\n}\r\n\r\nconst mapStateToProps = ({ serverListReducers }) => ({\r\n  isLoading: serverListReducers.isLoading,\r\n  isError: serverListReducers.isError,\r\n})\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  requestServerList: () => dispatch(requestServerList()),\r\n})\r\n\r\nexport default memo(\r\n  connect(mapStateToProps, mapDispatchToProps)(ServersListContainer),\r\n)\r\n","import ViewSelectedServer from '../Molecules/changeValueServer/ViewSelectedServer'\r\nimport ServerListContainer from '../Molecules/serversList/ServersListContainer'\r\nimport '../../Assets/_serversPage.scss'\r\n\r\nexport const ServersPage = () => {\r\n  return (\r\n    <div className=\"servers-page\">\r\n      <ServerListContainer />\r\n      <ViewSelectedServer />\r\n    </div>\r\n  )\r\n}\r\n","import './App.css'\nimport { ServersPage } from './Components/Pages/ServersPage'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ServersPage />\n    </div>\n  )\n}\n\nexport default App\n","import {\r\n  ERROR_TO_SERVER_FOR_SERVER_LIST,\r\n  REQUEST_TO_SERVER_FOR_SERVER_LIST,\r\n  SELECTION_SERVER_FOR_VIEW,\r\n  SUCCESS_REQUEST_TO_SERVER_FOR_SERVER_LIST,\r\n  OPEN_INPUT_FOR_CHANGE_VALUE_SERVER,\r\n  CLOSE_INPUT_FOR_CHANGE_VALUE_SERVER,\r\n  REQUEST_TO_SERVER_FOR_CHANGE_VALUE_SERVER,\r\n  SUCCESS_TO_SERVER_FOR_CHANGE_VALUE_SERVER,\r\n  ERROR_TO_SERVER_FOR_CHANGE_VALUE_SERVER,\r\n} from '../../const'\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  isLoadingRequestToChangeValueServer: false,\r\n  isErrorRequestToChangeValueServer: false,\r\n  isError: false,\r\n  serverList: [],\r\n  selectedServer: [],\r\n  pageOpenSelectedServer: false,\r\n  BoolenValueInputChangeNameServer: false,\r\n  selectedInputWhichChangeValues: ['', ''],\r\n}\r\n\r\nexport const serverListReducers = (\r\n  state = initialState,\r\n  {\r\n    type,\r\n    serverList,\r\n    selectedServerId,\r\n    updateValuesServer,\r\n    idSelectedInputWhichChangeValue,\r\n    typeSelectedInputWhichChangeValue,\r\n    idServer,\r\n  },\r\n) => {\r\n  switch (type) {\r\n    case REQUEST_TO_SERVER_FOR_CHANGE_VALUE_SERVER:\r\n      return {\r\n        ...state,\r\n        isLoadingRequestToChangeValueServer: true,\r\n      }\r\n    case SUCCESS_TO_SERVER_FOR_CHANGE_VALUE_SERVER:\r\n      return {\r\n        ...state,\r\n        serverList: [...serverList],\r\n        selectedServer: [updateValuesServer, idSelectedInputWhichChangeValue],\r\n        isErrorRequestToChangeValueServer: false,\r\n        isLoadingRequestToChangeValueServer: false,\r\n      }\r\n    case ERROR_TO_SERVER_FOR_CHANGE_VALUE_SERVER:\r\n      return {\r\n        ...state,\r\n        isErrorRequestToChangeValueServer: true,\r\n        isLoadingRequestToChangeValueServer: false,\r\n      }\r\n    case OPEN_INPUT_FOR_CHANGE_VALUE_SERVER:\r\n      state.selectedInputWhichChangeValues[\r\n        idSelectedInputWhichChangeValue\r\n      ] = typeSelectedInputWhichChangeValue\r\n      return {\r\n        ...state,\r\n        selectedInputWhichChangeValues: [\r\n          ...state.selectedInputWhichChangeValues,\r\n        ],\r\n      }\r\n    case CLOSE_INPUT_FOR_CHANGE_VALUE_SERVER:\r\n      state.selectedInputWhichChangeValues[idSelectedInputWhichChangeValue] = ''\r\n      return {\r\n        ...state,\r\n        selectedInputWhichChangeValues: [\r\n          ...state.selectedInputWhichChangeValues,\r\n        ],\r\n      }\r\n    case SELECTION_SERVER_FOR_VIEW:\r\n      return {\r\n        ...state,\r\n        selectedServer: [state.serverList[selectedServerId], +selectedServerId],\r\n        pageOpenSelectedServer: true,\r\n        selectedInputWhichChangeValues: ['', ''],\r\n      }\r\n    case REQUEST_TO_SERVER_FOR_SERVER_LIST:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      }\r\n\r\n    case SUCCESS_REQUEST_TO_SERVER_FOR_SERVER_LIST:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        serverList: serverList,\r\n      }\r\n    case ERROR_TO_SERVER_FOR_SERVER_LIST:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import {\r\n  CHANGE_NAME_SERVER,\r\n  CHANGE_NAME_SERVER_ERROR,\r\n  CHANGE_TYPE_SERVER,\r\n  typesOfServer,\r\n} from '../../const'\r\n\r\nconst initialState = {\r\n  server_name: '',\r\n  server_type: typesOfServer[0],\r\n  error: false,\r\n}\r\n\r\nexport const userActionWithInputsReducer = (\r\n  state = initialState,\r\n  { type, userFromInputNameForServerName, userFromInputTypeForServerType },\r\n) => {\r\n  switch (type) {\r\n    case CHANGE_NAME_SERVER_ERROR:\r\n      return {\r\n        ...state,\r\n        error: true,\r\n      }\r\n    case CHANGE_NAME_SERVER:\r\n      return {\r\n        ...state,\r\n        server_name: userFromInputNameForServerName,\r\n        error: false,\r\n      }\r\n    case CHANGE_TYPE_SERVER:\r\n      return {\r\n        ...state,\r\n        server_type: userFromInputTypeForServerType,\r\n        error: false,\r\n      }\r\n    default:\r\n      return {\r\n        ...state,\r\n      }\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport { serverListReducers } from './reducers/serverListReducers'\r\nimport { userActionWithInputsReducer } from './reducers/userActionWithInputsReducer'\r\n\r\nexport const allReducers = combineReducers({\r\n  serverListReducers,\r\n  userActionWithInputsReducer,\r\n})\r\n","import { applyMiddleware, createStore } from 'redux'\r\n\r\nimport thunk from 'redux-thunk'\r\nimport logger from 'redux-logger'\r\nimport { allReducers } from './configureStore'\r\n\r\nexport const store = createStore(allReducers, applyMiddleware(thunk, logger))\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App.jsx'\nimport { Provider } from 'react-redux'\nimport { store } from './store/index'\nimport './index.css'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}